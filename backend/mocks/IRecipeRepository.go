// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "ppo/domain"

	dto "ppo/services/dto"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IRecipeRepository is an autogenerated mock type for the IRecipeRepository type
type IRecipeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, recipe
func (_m *IRecipeRepository) Create(ctx context.Context, recipe *domain.Recipe) (uuid.UUID, error) {
	ret := _m.Called(ctx, recipe)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Recipe) (uuid.UUID, error)); ok {
		return rf(ctx, recipe)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Recipe) uuid.UUID); ok {
		r0 = rf(ctx, recipe)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Recipe) error); ok {
		r1 = rf(ctx, recipe)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *IRecipeRepository) DeleteById(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, filter, page
func (_m *IRecipeRepository) GetAll(ctx context.Context, filter *dto.RecipeFilter, page int) ([]*domain.Recipe, error) {
	ret := _m.Called(ctx, filter, page)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*domain.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RecipeFilter, int) ([]*domain.Recipe, error)); ok {
		return rf(ctx, filter, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RecipeFilter, int) []*domain.Recipe); ok {
		r0 = rf(ctx, filter, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RecipeFilter, int) error); ok {
		r1 = rf(ctx, filter, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *IRecipeRepository) GetById(ctx context.Context, id uuid.UUID) (*domain.Recipe, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *domain.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Recipe, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Recipe); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySaladId provides a mock function with given fields: ctx, saladId
func (_m *IRecipeRepository) GetBySaladId(ctx context.Context, saladId uuid.UUID) (*domain.Recipe, error) {
	ret := _m.Called(ctx, saladId)

	if len(ret) == 0 {
		panic("no return value specified for GetBySaladId")
	}

	var r0 *domain.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Recipe, error)); ok {
		return rf(ctx, saladId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Recipe); ok {
		r0 = rf(ctx, saladId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, saladId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, recipe
func (_m *IRecipeRepository) Update(ctx context.Context, recipe *domain.Recipe) error {
	ret := _m.Called(ctx, recipe)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Recipe) error); ok {
		r0 = rf(ctx, recipe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRecipeRepository creates a new instance of IRecipeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRecipeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRecipeRepository {
	mock := &IRecipeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
