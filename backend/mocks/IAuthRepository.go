// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "ppo/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IAuthRepository is an autogenerated mock type for the IAuthRepository type
type IAuthRepository struct {
	mock.Mock
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *IAuthRepository) GetByUsername(ctx context.Context, username string) (*domain.UserAuth, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *domain.UserAuth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.UserAuth, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.UserAuth); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserAuth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, authInfo
func (_m *IAuthRepository) Register(ctx context.Context, authInfo *domain.User) (uuid.UUID, error) {
	ret := _m.Called(ctx, authInfo)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (uuid.UUID, error)); ok {
		return rf(ctx, authInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) uuid.UUID); ok {
		r0 = rf(ctx, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAuthRepository creates a new instance of IAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthRepository {
	mock := &IAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
